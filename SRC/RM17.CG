[logics for room 17 -- rm.pg.central

%include "gamedefs"
%include "rm17.msg"


%define	close.enough			15

%define	done.playing			lf0
%define	slide.done			lf1
%define	pulley.done			lf2
%define	music.done			lf3
%define	ego.arrived			lf4

%define	toy.in.hand			lcl0
%define	toy.playing.on			lcl1

%define	message.timer			wait.1


								[  alloc actual view#
%object	a.flag			obj.3	[   300	228	 120v
%object	a.swing			obj.4	[   400	268	 133v-33
%object	a.rings			obj.350	[   350	270	 135v-35
%object	a.trapeze			obj.400.1	[   400	256	 128v-28
[object	a.slide			overlay.pic!


if (init.log)
	{
	set.horizon( 83);
	speed = halffast;

	if (force.a.test)
		{
		get( i.slide);
		get( i.swing);
		get( i.rings);
		get( i.trapeze);
		get( i.pulley);
		}

	if (has( i.slide))
		{
		load.view( v.ego.pg.slide);
		work = pic.slide;
		load.pic( work);
		}
	else
		{
		work = pic.fort.chain;
		load.pic( work);
		}

	if (has( i.pulley))
		{
		work = pic.pulley.rope.bottom;
		load.pic( work);
		if (current.status == on.pulley)
			{
			load.view( v.ego.pg.pulley);
			}
		}

	if (has( i.trapeze))
		{
		load.view( v.ego.pg.trapeze);
		load.view( v.pg.trapeze);
		}

	if (has( i.swing))
		{
		load.view( v.ego.pg.swing);
		load.view( v.pg.swing);
		}

	if (has( i.rings))
		{
		load.view( v.ego.pg.rings);
		load.view( v.pg.rings);
		}


	load.view( v.ego.pg);
	load.view( v.ego.pg.ladder);
	load.view( v.pg.flag);
	load.sound( m.playground);
	set( music.done);

	load.pic( current.room);
	draw.pic( current.room);
	discard.pic( current.room);

	animate.obj( a.flag);
	ignore.horizon( a.flag);
	position( a.flag, 40, 37);
	set.view( a.flag, v.pg.flag);
	work = 4;
	cycle.frequency( a.flag, work);
	draw( a.flag);
	
	if (has( i.slide))
		{
		work = pic.slide;
		overlay.pic( work);
		}
	else
		{
		work = pic.fort.chain;
		overlay.pic( work);
		}

	if (has( i.trapeze))
		{
		animate.obj( a.trapeze);
		position( a.trapeze, 47, 109);
		set.view( a.trapeze, v.pg.trapeze);
		work = 2;
		cycle.frequency( a.trapeze, work);
		ignore.objs( a.trapeze);
		set.priority( a.trapeze, 13);
		draw( a.trapeze);
		}

	if (has( i.swing))
		{
		block( 59, 129, 73, 133);		[	1 more Noid!

		animate.obj( a.swing);
		position( a.swing, 66, 122);
		set.view( a.swing, v.pg.swing);
		work = 2;
		cycle.frequency( a.swing, work);
		ignore.objs( a.swing);
		set.priority( a.swing, 12);
		draw( a.swing);
		}

	if (has( i.rings))
		{
		animate.obj( a.rings);
		position( a.rings, 80, 108);
		set.view( a.rings, v.pg.rings);
		work = 2;
		cycle.frequency( a.rings, work);
		ignore.objs( a.rings);
		set.priority( a.rings, 13);
		draw( a.rings);
		}

	if (has( i.pulley))
		{
		work = pic.pulley.rope.bottom;
		overlay.pic( work);
		}

	if (current.status == on.pulley)
		{
		toy.playing.on = pulley;
		set.view( ego, v.ego.pg.pulley);
		ignore.horizon( ego);
		position( ego, 89, 30);
		move.obj( ego, 58, 61, 0, pulley.done);
		program.control( );
		}
	else
		{
		current.status = walking;
		observe.horizon( ego);
		release.priority( ego);
		set.view( ego, v.ego.pg);
		}

	if (demo)
		{
		ego.location = 0;
		position( ego, 78, 166);
		display( 22, 0, 16);
		display( 23, 0, 17);
		display( 24, 0, 18);
		move.obj( ego, 28, 116, 0, ego.arrived);
		}

	ignore.blocks( ego);
	draw( ego);
	set( next.frame);
	show.pic( );
	return( );

	}


if (demo)
	{
	goto exit;
	}

if (current.status == on.top.of.fort)
	{
	observe.blocks( ego);
	ignore.horizon( ego);
	set.priority( ego, 11);
	}
else
	{
	if (current.status == climbing)
		{
		observe.blocks( ego);
		ignore.horizon( ego);
		set.priority( ego, 13);
		}
	else
		{
		if (current.status == on.pulley)
			{
			ignore.horizon( ego);
			ignore.blocks( ego);
			set.priority( ego, 15);
			}
		else
			{
			if (current.status == sliding)
				{
				ignore.blocks( ego);
				ignore.horizon( ego);
				set.priority( ego, 5);
				}
			else
				{
				observe.horizon( ego);
				release.priority( ego);
				if (posn( ego, 56, 127, 75, 135))	[	patch the damn swing
					{
					observe.blocks( ego);
					}
				else
					{
					ignore.blocks( ego);
					}
				}
			}
		}
	}
	

if (next.frame)
	{
	reset( next.frame);

	if (has( i.swing))
		{
		stop.update( a.swing);
		}

	if (has( i.rings))
		{
		stop.update( a.rings);
		}

	if (has( i.trapeze))
		{
		stop.update( a.trapeze);
		}

	}


[*****
:use.it
[*****


[*****
:do.it
[*****

if (doit)
	{
	reset( doit);
	}
else
	{
	goto no.input;
	}


if (current.status == playing.on.toy)
	{
	if (toy.playing.on == swing)
		{
		current.status = walking;
		set.view( ego, v.ego.pg);
		work = 1;
		cycle.time( ego, work);
		x = old.ego.x;
		y = old.ego.y;
		x -= ego.x;
		y -= ego.y;
		reposition( ego, x, y);
		reset( keep.cycling);
		start.motion( ego);

		draw( a.swing);
		set( next.frame);
		}

	if (toy.playing.on == rings)
		{
		current.status = walking;
		set.view( ego, v.ego.pg);
		work = 1;
		cycle.time( ego, work);
		x = 0;
		y = 8;
		reposition( ego, x, y);
		reset( keep.cycling);
		start.motion( ego);

		draw( a.rings);
		set( next.frame);
		}

	if (toy.playing.on == trapeze)
		{
		current.status = walking;
		set.view( ego, v.ego.pg);
		work = 1;
		cycle.time( ego, work);
		x = 0;
		y = 8;
		reposition( ego, x, y);
		reset( keep.cycling);
		release.priority( ego);
		start.motion( ego);

		draw( a.trapeze);
		set( next.frame);
		}

	}
else
	{
	if (!have.match && 
		has( i.trapeze) && 
		posn( ego, 42, 115, 57, 135))
		{
		current.status = playing.on.toy;
		toy.playing.on = trapeze;
		set.view( ego, v.ego.pg.trapeze);
		work = 2;
		cycle.time( ego, work);
		x = 47;
		y = 123;
		x -= ego.x;
		y -= ego.y;
		reposition( ego, x, y);
		set.priority( ego, 15);
		stop.motion( ego);
		set( keep.cycling);

		start.update( a.trapeze);
		erase( a.trapeze);
		set( have.match);
		}

	if (!have.match && 
		has( i.swing) && 
		posn( ego, 58, 115, 73, 138))
		{
		current.status = playing.on.toy;
		toy.playing.on = swing;
		set.view( ego, v.ego.pg.swing);
		work = 3;
		cycle.time( ego, work);
		get.posn( ego, old.ego.x, old.ego.y);
		x = 66;
		y = 122;
		x -= ego.x;
		y -= ego.y;
		reposition( ego, x, y);
		stop.motion( ego);
		set( keep.cycling);

		start.update( a.swing);
		erase( a.swing);
		set( have.match);
		}

	if (!have.match && 
		has( i.rings) && 
		posn( ego, 74, 115, 92, 135))
		{
		current.status = playing.on.toy;
		toy.playing.on = rings;
		set.view( ego, v.ego.pg.rings);
		work = 4;
		cycle.time( ego, work);
		x = 80;
		y = 120;
		x -= ego.x;
		y -= ego.y;
		reposition( ego, x, y);
		set( keep.cycling);
		stop.motion( ego);

		start.update( a.rings);
		erase( a.rings);
		set( have.match);
		}

	}

	
[*****
:no.input
[*****

if  (has( i.slide) && 
	hit.special && 
	current.status == on.top.of.fort && 
	posn( ego, 38, 69, 53, 82))
	{
	current.status = sliding;
	program.control( );
	set.view( ego, v.ego.pg.slide);
	x = 34;
	y = 86;
	x -= ego.x;
	y -= ego.y;
	reposition( ego, x, y);
	move.obj( ego, 6, 114, 2, slide.done);
	ignore.blocks( ego);
	ignore.objs( ego);
	ignore.horizon( ego);
	set.priority( ego, 5);
	set( have.match);
	}

if (slide.done)
	{
	reset( slide.done);
	toy.playing.on = 0;
	current.status = walking;
	release.priority( ego);
	set.view( ego, v.ego.pg);
	x = 4;
	y = 117;
	x -= ego.x;
	y -= ego.y;
	reposition( ego, x, y);
	player.control( );
	observe.blocks( ego);
	observe.horizon( ego);
	observe.objs( ego);
	}


if (pulley.done)					[	he's made his entrance
	{
	reset( pulley.done);
	toy.playing.on = 0;
	current.status = on.top.of.fort;
	set.view( ego, v.ego.pg);
	x = 57;
	y = 70;
	x -= ego.x;
	y -= ego.y;
	reposition( ego, x, y);
	player.control( );
	reset( keep.cycling);
	observe.blocks( ego);
	}


if (posn( ego, 95, 87, 101, 90) && 
	ego.dir == ego.up && 
	current.status == climbing)		[	top of ladder
	{
	current.status = on.top.of.fort;
	set.priority( ego, 11);
	set.view( ego, v.ego.pg);
	x = 97;
	y = 82;
	x -= ego.x;
	y -= ego.y;
	reposition( ego, x, y);
	player.control( );
	reset( keep.cycling);
	}

if (hit.special && 
	current.status == climbing)		[	bottom of ladder
	{
	current.status = walking;
	release.priority( ego);
	set.view( ego, v.ego.pg);
	x = 0;
	y = 4;
	reposition( ego, x, y);
	player.control( );
	reset( keep.cycling);
	}

if  (current.status == walking && 
	ego.dir == ego.up && 
	posn( ego, 93, 133, 101, 138))	 	[	Base of ladder
	{
	current.status = climbing;
	observe.blocks( ego);
	set.priority( ego, 13);
	set.view( ego, v.ego.pg.ladder);
	x = 97;
	y = 128;
	x -= ego.x;
	y -= ego.y;
	reposition( ego, x, y);
	}
else
	{
	if  (current.status == on.top.of.fort && 
		ego.dir == ego.down &&
		posn( ego, 93, 82, 101, 85))	 	[	Top of ladder
		{
		current.status = climbing;
		observe.blocks( ego);
		set.priority( ego, 13);
		set.view( ego, v.ego.pg.ladder);
		x = 97;
		y = 90;
		x -= ego.x;
		y -= ego.y;
		reposition( ego, x, y);
		}
	}


[*****
:exit							[	test for leaving the room
[*****

if (music.done)
	{
	reset( music.done);
	sound( m.playground, music.done);
	}

if (edge.ego.hit == bottom)		{reset( no.script);new.room( rm.pg.south);}
if (edge.ego.hit == top)			{reset( no.script);new.room( rm.pg.north);}
if (edge.ego.hit == left)		{reset( no.script);new.room( rm.pg.west);}
if (edge.ego.hit == right)		{reset( no.script);new.room( rm.pg.east);}

if (demo && ego.arrived)
	{
	reset( ego.arrived);
	++ego.location;
	if (ego.location == 1)
		{
		set.loop( ego, facing.right);
		move.obj( ego, 46, 98, 0, ego.arrived);
		}
	if (ego.location == 2)
		{
		move.obj( ego, 72, 98, 0, ego.arrived);
		}
	if (ego.location == 3)
		{
		move.obj( ego, 114, 140, 0, ego.arrived);
		}
	if (ego.location == 4)
		{
		set.loop( ego, facing.left);
		move.obj( ego, 18, 140, 0, ego.arrived);
		}
	if (ego.location == 5)
		{
		set.loop( ego, facing.right);
		move.obj( ego, 43, 115, 0, ego.arrived);
		}
	if (ego.location == 6)
		{
		move.obj( ego, 87, 115, 0, ego.arrived);
		}
	if (ego.location == 7)
		{
		move.obj( ego, 100, 102, 0, ego.arrived);
		}
	if (ego.location == 8)
		{
		move.obj( ego, 110, 102, 0, ego.arrived);
		}
	if (ego.location == 9)
		{
		move.obj( ego, 149, 141, 0, ego.arrived);
		}
	if (ego.location == 10)
		{
		reset( no.script);
		new.room( rm.pg.east);
		}
	}

