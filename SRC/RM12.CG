[logics for room 12 -- rm.mickey.store

%include "rm12.msg"
%include "gamedefs"


%define	max.toys.per.trip			lcl0
%define	toys.in.hand				lcl2

%define	seen.message				lf0
%define	add.some.dollars			lf1
%define	sub.some.dollars			lf2
%define	goto.change.room			lf3
%define	could.buy.rope				lf4
%define	could.buy.trapeze			lf5
%define	could.buy.ships.wheel		lf6
%define	could.buy.trampoline		lf7
%define	could.buy.catwalk			lf8
%define	could.buy.somersault.bar		lf9

%define	pressed.button				tf9


								[ view#	size	alloc  	
								[========================
%object	a.rope			obj.350  	[	106	268	350		
%object	a.trapeze			obj.400.1	[	128	256	400		
%object	a.ships.wheel		obj.400.2	[	129	196	400		
%object	a.trampoline		obj.3  	[	130	220	300	
%object	a.catwalk			obj.4  	[	108	256	400
%object	a.somersault.bar	obj.5  	[	132	464	500
%object	a.clerk			obj.7	[	101	424	700


if (init.log)
	{
	set.horizon( 1);
	toys.in.hand = 0;

	reset( owes.for.toy.1);
	reset( owes.for.toy.2);
	reset( owes.for.toy.3);
	reset( owes.for.toy.4);
	reset( owes.for.toy.5);
	reset( owes.for.toy.6);

	load.view( v.ego);
	set.view( ego, v.ego);

	load.logics( store.logics);
	load.logics( dons.money.logics);
	load.logics( owes.money.logics);

	if (!has( i.rope))
		{
		set( could.buy.rope);
		load.view( v.store.rope);
		}

	if (!has( i.trapeze))
		{
		set( could.buy.trapeze);
		load.view( v.pg.trapeze);
		}

	if (!has( i.ships.wheel))
		{
		set( could.buy.ships.wheel);
		load.view( v.pg.ships.wheel);
		}

	if (!has( i.trampoline))
		{
		set( could.buy.trampoline);
		load.view( v.pg.trampoline);
		}

	if (!has( i.catwalk))
		{
		set( could.buy.catwalk);
		load.view( v.store.catwalk);
		}

	if (!has( i.somersault.bar))
		{
		set( could.buy.somersault.bar);
		load.view( v.pg.somersault.bar);
		}

	load.view( v.mickey.store);
	load.sound( s.wrong);
	load.sound( s.ok);
	load.sound( m.store);

	load.pic( current.room);
	draw.pic( current.room);
	discard.pic( current.room);

	animate.obj( a.clerk);			[	cashier
	position( a.clerk, 72, 159);
	set.view( a.clerk, v.mickey.store);
	draw( a.clerk);


	if (could.buy.rope)
		{
		animate.obj( a.rope);		[	upper left
		position( a.rope, 50, 70);
		set.view( a.rope, v.store.rope);
		draw( a.rope);
		}

	if (could.buy.catwalk)
		{
		animate.obj( a.catwalk);		[	upper center
		position( a.catwalk, 74, 76);
		set.view( a.catwalk, v.store.catwalk);
		draw( a.catwalk);
		}

	if (could.buy.trapeze)
		{
		animate.obj( a.trapeze);		[	Upper right
		position( a.trapeze, 111, 62);
		set.view( a.trapeze, v.pg.trapeze);
		draw( a.trapeze);
		}

	if (could.buy.ships.wheel)
		{
		animate.obj( a.ships.wheel); 	[	Center left
		position( a.ships.wheel, 40, 108);
		set.view( a.ships.wheel, v.pg.ships.wheel);
		draw( a.ships.wheel);
		}

	if (could.buy.trampoline)
		{
		animate.obj( a.trampoline);	[	lower left
		position( a.trampoline, 28, 144);
		set.view( a.trampoline, v.pg.trampoline);
		draw( a.trampoline);
		}

	if (could.buy.somersault.bar)
		{
		animate.obj( a.somersault.bar); [	lower right
		position( a.somersault.bar, 113, 144);
		set.view( a.somersault.bar, v.pg.somersault.bar);
		draw( a.somersault.bar);
		}


	position( ego, 147, 133);
	draw( ego);

	if (level == beginning)			[	Handle varying costs
		{
		max.toys.per.trip	= 1;

		cost.1.dollars		= 0;
		cost.1.ten.cents	= 1;
		cost.1.cents		= 0;

		cost.2.dollars		= 0;
		cost.2.ten.cents	= 0;
		cost.2.cents		= 5;

		cost.3.dollars		= 0;
		cost.3.ten.cents	= 0;
		cost.3.cents		= 1;
		
		cost.4.dollars		= 0;
		cost.4.ten.cents	= 1;
		cost.4.cents		= 0;
		
		cost.5.dollars		= 0;
		cost.5.ten.cents	= 2;
		cost.5.cents		= 5;

		cost.6.dollars		= 0;
		cost.6.ten.cents	= 0;
		cost.6.cents		= 5;
		}
	else
		{
		if (level == intermediate)
			{
			max.toys.per.trip	= 1;

			cost.1.dollars		= 0;
			cost.1.ten.cents	= 5;
			cost.1.cents		= 0;

			cost.2.dollars		= 0;
			cost.2.ten.cents	= 2;
			cost.2.cents		= 0;
			
			cost.3.dollars		= 0;
			cost.3.ten.cents	= 1;
			cost.3.cents		= 5;
			
			cost.4.dollars		= 0;
			cost.4.ten.cents	= 3;
			cost.4.cents		= 5;
			
			cost.5.dollars		= 1;
			cost.5.ten.cents	= 0;
			cost.5.cents		= 5;
			
			cost.6.dollars		= 0;
			cost.6.ten.cents	= 3;
			cost.6.cents		= 0;
			}
		else
			{
			max.toys.per.trip	= 3;

			cost.1.dollars		= 2;
			cost.1.ten.cents	= 2;
			cost.1.cents		= 7;
			
			cost.2.dollars		= 0;
			cost.2.ten.cents	= 8;
			cost.2.cents		= 9;
			
			cost.3.dollars		= 0;
			cost.3.ten.cents	= 6;
			cost.3.cents		= 3;
			
			cost.4.dollars		= 1;
			cost.4.ten.cents	= 8;
			cost.4.cents		= 9;
			
			cost.5.dollars		= 2;
			cost.5.ten.cents	= 9;
			cost.5.cents		= 9;

			cost.6.dollars		= 1;
			cost.6.ten.cents	= 0;
			cost.6.cents		= 7;
			}
		}


	show.pic( );
	if  (has( i.rope) &&
		has( i.trapeze) &&
		has( i.ships.wheel) &&
		has( i.trampoline) &&
		has( i.catwalk) &&
		has( i.somersault.bar))
		{
		print( 22);
		set( sold.out);
		}
	else
		{
		reset( sold.out);
		}

	reset( doit);
	reset( useit);

	set( next.frame);
	call( store.logics);
	call( dons.money.logics);
	return( );

	}							[	end room init.


if (next.frame)
	{
	reset( next.frame);
	if (could.buy.rope && !has( i.rope))
		{stop.update( a.rope);}
	if (could.buy.trapeze && !has( i.trapeze))
		{stop.update( a.trapeze);}
	if (could.buy.catwalk && !has( i.catwalk))
		{stop.update( a.catwalk);}
	if (could.buy.ships.wheel && !has( i.ships.wheel))	
		{stop.update( a.ships.wheel);}
	if (could.buy.trampoline && !has( i.trampoline))	
		{stop.update( a.trampoline);}
	if (could.buy.somersault.bar && !has( i.somersault.bar))
		{stop.update( a.somersault.bar);}
	}


if (posn( ego, 45, 142, 100, screen.bottom)) [	near cashier
	{
	ego.location = cashier;
	}
else
	{
	if (posn( ego, 37, 76, 60, 86) && could.buy.rope)
		{
		if (ego.location != rope && !has( i.rope))
			{
			set( print.cost);
			}
		ego.location = rope;
		cost.dollars = cost.1.dollars;
		cost.ten.cents = cost.1.ten.cents;
		cost.cents = cost.1.cents;
		}
	else
		{
		if (posn( ego, 106, 76, 121, 87) && could.buy.trapeze)
			{
			if (ego.location != trapeze && !has( i.trapeze))
				{
				set( print.cost);
				}
			ego.location = trapeze;
			cost.dollars = cost.2.dollars;
			cost.ten.cents = cost.2.ten.cents;
			cost.cents = cost.2.cents;
			}
		else
			{
			if (posn( ego, 24, 100, 53, 115) && could.buy.ships.wheel)
				{
				if (ego.location != ships.wheel && !has( i.ships.wheel))
					{
					set( print.cost);
					}
				ego.location = ships.wheel;
				cost.dollars = cost.3.dollars;
				cost.ten.cents = cost.3.ten.cents;
				cost.cents = cost.3.cents;
				}
			else
				{
				if (posn( ego, 10, 135, 44, 155) && could.buy.trampoline)
					{
					if (ego.location != trampoline && !has( i.trampoline))
						{
						set( print.cost);
						}
					ego.location = trampoline;
					cost.dollars = cost.4.dollars;
					cost.ten.cents = cost.4.ten.cents;
					cost.cents = cost.4.cents;
					}
				else
					{
					if (posn( ego, 67, 76, 87, 86) && could.buy.catwalk)
						{
						if (ego.location != catwalk && !has( i.catwalk))
							{
							set( print.cost);
							}
						ego.location = catwalk;
						cost.dollars = cost.5.dollars;
						cost.ten.cents = cost.5.ten.cents;
						cost.cents = cost.5.cents;
						}
					else
						{
						if (posn( ego, 101, 138, 132, 155) && 
							could.buy.somersault.bar)
							{
							if  (ego.location != somersault.bar &&
								!has( i.somersault.bar))
								{
								set( print.cost);
								}
							ego.location = somersault.bar;
							cost.dollars = cost.6.dollars;
							cost.ten.cents = cost.6.ten.cents;
							cost.cents = cost.6.cents;
							}
						else
							{
							ego.location = 0;
							}
						}
					}
				}
			}
		}
	}

if (print.cost)
	{
	[don't 	reset( print.cost);
	call( store.logics);
	}


[*****
:do.it
[*****

if (!doit)
	{
	goto no.input;
	}
else
	{
	reset( doit);
	set( pressed.button);
	}


if (ego.location == cashier)
	{
	set( have.match);
	if (sold.out)
		{
		print( 22);
		}
	else
		{
		if (toys.in.hand)
			{
			reset( no.script);
			new.room( rm.change);	[	goto change making screen
			}
		else
			{
			sound( s.wrong, done);
			print( 20);			[	"Pick something before you pay
			}
		}
	}


if (ego.location == rope)
	{
	set( have.match);
	set( next.frame);
	if (has( i.rope) && owes.for.toy.1)
		{
		drop( i.rope);
		reset( owes.for.toy.1);
		draw( a.rope);
		set( sub.some.dollars);		[	trigger code below
		}
	else
		{
		if (toys.in.hand == max.toys.per.trip)
			{
			sound( s.wrong, done);
			print( 24);			[	"Pay for the 1 you've got first
			}
		else
			{
			get( i.rope);
			set( owes.for.toy.1);
			start.update( a.rope);
			erase( a.rope);
			set( add.some.dollars);
			}
		}
	}

if (ego.location == trapeze) 			[	near trapeze
	{
	set( have.match);
	set( next.frame);
	if (has( i.trapeze) && owes.for.toy.2)
		{
		drop( i.trapeze);
		reset( owes.for.toy.2);
		draw( a.trapeze);
		set( sub.some.dollars);		[	trigger code below
		}
	else
		{
		if (toys.in.hand == max.toys.per.trip)
			{
			sound( s.wrong, done);
			print( 24);			[	"Pay for the 1 you've got first
			}
		else
			{
			get( i.trapeze);
			set( owes.for.toy.2);
			start.update( a.trapeze);
			erase( a.trapeze);
			set( add.some.dollars);		[	trigger code below
			}
		}
	}

if (ego.location == ships.wheel)
	{
	set( have.match);
	set( next.frame);
	if (has( i.ships.wheel) && owes.for.toy.3)
		{
		drop( i.ships.wheel);
		reset( owes.for.toy.3);
		draw( a.ships.wheel);
		set( sub.some.dollars); 		[	trigger code below
		}
	else
		{
		if (toys.in.hand == max.toys.per.trip)
			{
			sound( s.wrong, done);
			print( 24);			[	"Pay for what you've got 
			}
		else
			{
			get( i.ships.wheel);
			set( owes.for.toy.3);
			start.update( a.ships.wheel);
			erase( a.ships.wheel);
			set( add.some.dollars);		[	trigger code below
			}
		}
	}

if (ego.location == trampoline)		[	near the trampoline
	{
	set( have.match);
	set( next.frame);
	if (has( i.trampoline) && owes.for.toy.4)
		{
		drop( i.trampoline);
		reset( owes.for.toy.4);
		draw( a.trampoline);
		set( sub.some.dollars);
		}
	else
		{
		if (toys.in.hand == max.toys.per.trip)
			{
			sound( s.wrong, done);
			print( 24);			[	"Pay first
			}
		else
			{
			get( i.trampoline);
			set( owes.for.toy.4);
			start.update( a.trampoline);
			erase( a.trampoline);
			set( add.some.dollars);		[	trigger code below
			}
		}
	}

if (ego.location == catwalk)
	{
	set( have.match);
	set( next.frame);
	if (has( i.catwalk) && owes.for.toy.5)
		{
		drop( i.catwalk);
		reset( owes.for.toy.5);
		draw( a.catwalk);
		set( sub.some.dollars);
		}
	else
		{
		if (toys.in.hand == max.toys.per.trip)
			{
			sound( s.wrong, done);
			print( 24);			[	"Pay first
			}
		else
			{
			get( i.catwalk);
			set( owes.for.toy.5);
			start.update( a.catwalk);
			erase( a.catwalk);
			set( add.some.dollars);
			}
		}
	}

if (ego.location == somersault.bar)
	{
	set( have.match);
	set( next.frame);
	if (has( i.somersault.bar) && owes.for.toy.6)
		{
		drop( i.somersault.bar);
		reset( owes.for.toy.6);
		draw( a.somersault.bar);
		set( sub.some.dollars);
		}
	else
		{
		if (toys.in.hand == max.toys.per.trip)
			{
			sound( s.wrong, done);
			print( 24);			[	"Pay first
			}
		else
			{
			get( i.somersault.bar);
			set( owes.for.toy.6);
			start.update( a.somersault.bar);
			erase( a.somersault.bar);
			set( add.some.dollars);
			}
		}
	}


if (!have.match)
	{
	sound( s.wrong, done);
	if (toys.in.hand)
		{
		print( 25); 				[	"Pay Minnie
		}
	else
		{
		if (sold.out)
			{
			print( 22);
			}
		else
			{
			print( 21); 			[	"Get closer sweet lips!
			}
		}
	}


[*****
:no.input
[*****

if (sub.some.dollars)
	{
	reset( sub.some.dollars);
	money.to.fix	 = owes.money;
	sub.dollars	 = cost.dollars;
	sub.cents		 = cost.cents;
	:loop1
	if (cost.ten.cents)
		{
		sub.cents	+= 10;
		--cost.ten.cents;
		goto loop1;
		}
	--toys.in.hand;
	sound( s.ok, done);
	call( owes.money.logics);
	}


if (add.some.dollars)
	{
	reset( add.some.dollars);
	money.to.fix	 = owes.money;
	add.dollars	 = cost.dollars;
	add.cents		 = cost.cents;
	:loop2
	if (cost.ten.cents)
		{
		add.cents	+= 10;
		--cost.ten.cents;
		goto loop2;
		}
	++toys.in.hand;
	sound( s.ok, done);
	call( owes.money.logics);
	}


if (update.window == owes.money)
	{
	[Don't let dynamic print if triggered just by recalc-ing owes.dollars!
	[Owes.dollars is only internal at this point.
	update.window = 0;
	}

if (!pressed.button && seconds.in.room > 30)
	{
	print( 20);
	set( pressed.button);
	}


[*****
:exit							[test for leaving the room
[*****

if (goto.change.room)
	{
	reset( no.script);
	new.room( rm.change);			[	goto change making screen
	}

--wait.1;
if (wait.1 == 1)
	{
	reset( seen.message);
	}

if  (hit.special && 
    !seen.message &&
    (ego.dir == ego.up.right ||
	ego.dir == ego.right ||
	ego.dir == ego.down.right))
	{
	if (toys.in.hand)
		{
		if (!seen.message)
			{
			sound( s.wrong, done);
			set( seen.message);
			print( 23);   
			wait.1 = 44;
			}
		}
	else
		{
		reset( no.script);
		new.room( rm.menu.west);
		}
	}

if (edge.ego.hit == right) 			[	That bastard's shoplifting!
	{
	if (toys.in.hand)
		{
		if (!seen.message)
			{
			sound( s.wrong, done);
			set( seen.message);
			print( 23);   
			wait.1 = 44;
			}
		}
	else
		{
		reset( no.script);
		new.room( rm.menu.west);
		}
	}

call( store.logics);
call( dons.money.logics);

